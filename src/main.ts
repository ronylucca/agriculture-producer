import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { ConfigService } from '@nestjs/config';
import { NestExpressApplication } from '@nestjs/platform-express';
import { join } from 'path';
import { AppModule } from './app.module';
import { AllExceptionsFilter } from '@/common/filters/all-exceptions.filter';

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);

  const configService = app.get(ConfigService);
  const port = configService.get('PORT', 3000);
  const apiPrefix = configService.get('API_PREFIX', 'api/v1');

  // Configura√ß√£o do prefixo global
  app.setGlobalPrefix(apiPrefix);

  // Servir arquivos est√°ticos (favicon, etc.)
  app.useStaticAssets(join(__dirname, '..', 'public'));

  // Configura√ß√£o de CORS
  app.enableCors({
    origin: configService.get('CORS_ORIGIN', '*'),
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    allowedHeaders: 'Content-Type, Accept, Authorization',
  });

  // Pipes globais para valida√ß√£o
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true,
      whitelist: true,
      forbidNonWhitelisted: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
    }),
  );

  // Filtros globais para tratamento de exce√ß√µes
  app.useGlobalFilters(new AllExceptionsFilter());

  // Configura√ß√£o do Swagger
  const config = new DocumentBuilder()
    .setTitle('Brain Agriculture API')
    .setDescription('Sistema de gest√£o rural - API para gerenciamento de produtores, fazendas e culturas')
    .setVersion('1.0')
    .addTag('Sistema', 'Informa√ß√µes do sistema e health check')
    .addTag('Produtores', 'Opera√ß√µes relacionadas aos produtores rurais')
    .addTag('Fazendas', 'Opera√ß√µes relacionadas √†s fazendas')
    .addTag('Culturas', 'Opera√ß√µes relacionadas √†s culturas')
    .addTag('Safras', 'Opera√ß√µes relacionadas √†s safras')
    .addTag('Culturas das Fazendas', 'Opera√ß√µes relacionadas √†s culturas cultivadas nas fazendas')
    .addTag('Dashboard', 'Opera√ß√µes relacionadas aos dashboards e relat√≥rios')
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup(`${apiPrefix}/docs`, app, document, {
    swaggerOptions: {
      persistAuthorization: true,
    },
  });

  await app.listen(port);
  console.log(`üöÄ Aplica√ß√£o rodando em: http://localhost:${port}/${apiPrefix}`);
  console.log(`üìö Documenta√ß√£o Swagger: http://localhost:${port}/${apiPrefix}/docs`);
}

bootstrap().catch((error) => {
  console.error('‚ùå Erro ao inicializar a aplica√ß√£o:', error);
  process.exit(1);
}); 